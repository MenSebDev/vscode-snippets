{
    "GTest EXPECT_THAT": {
        "prefix": "gteTHAT",
        "body": [
            "EXPECT_THAT(${1:value}, ${2:matcher});$0"
        ],
        "description": "Checks that `value` matches `matcher`."
    },
    "GTest EXPECT_TRUE": {
        "prefix": "gteTRUE",
        "body": [
            "EXPECT_TRUE(${1:condition});$0"
        ],
        "description": "Checks that `condition` is true."
    },
    "GTest EXPECT_FALSE": {
        "prefix": "gteFALSE",
        "body": [
            "EXPECT_FALSE(${1:condition});$0"
        ],
        "description": "Checks that `condition` is false."
    },
    "GTest EXPECT_EQ": {
        "prefix": "gteEQ",
        "body": [
            "EXPECT_EQ(${1:val1}, ${2:val2});$0"
        ],
        "description": "Checks that `val1 == val2`."
    },
    "GTest EXPECT_NE": {
        "prefix": "gteNE",
        "body": [
            "EXPECT_NE(${1:val1}, ${2:val2});$0"
        ],
        "description": "Checks that `val1 != val2`."
    },
    "GTest EXPECT_LT": {
        "prefix": "gteLT",
        "body": [
            "EXPECT_LT(${1:val1}, ${2:val2});$0"
        ],
        "description": "Checks that `val1 < val2`."
    },
    "GTest EXPECT_LE": {
        "prefix": "gteLE",
        "body": [
            "EXPECT_LE(${1:val1}, ${2:val2});$0"
        ],
        "description": "Checks that `val1 <= val2`."
    },
    "GTest EXPECT_GT": {
        "prefix": "gteGT",
        "body": [
            "EXPECT_GT(${1:val1}, ${2:val2});$0"
        ],
        "description": "Checks that `val1 > val2`."
    },
    "GTest EXPECT_GE": {
        "prefix": "gteGE",
        "body": [
            "EXPECT_GE(${1:val1}, ${2:val2});$0"
        ],
        "description": "Checks that `val1 >= val2`."
    },
    "GTest EXPECT_STREQ": {
        "prefix": "gteSTREQ",
        "body": [
            "EXPECT_STREQ(${1:str1}, ${2:str2});$0"
        ],
        "description": "Checks that C-strings `str1` and `str2` are equal."
    },
    "GTest EXPECT_STRNE": {
        "prefix": "gteSTRNE",
        "body": [
            "EXPECT_STRNE(${1:str1}, ${2:str2});$0"
        ],
        "description": "Checks that C-strings `str1` and `str2` are not equal."
    },
    "GTest EXPECT_STRCASEEQ": {
        "prefix": "gteSTRCASEEQ",
        "body": [
            "EXPECT_STRCASEEQ(${1:str1}, ${2:str2});$0"
        ],
        "description": "Checks that C-strings `str1` and `str2` are equal, ignoring case."
    },
    "GTest EXPECT_STRCASENE": {
        "prefix": "gteSTRCASENE",
        "body": [
            "EXPECT_STRCASENE(${1:str1}, ${2:str2});$0"
        ],
        "description": "Checks that C-strings `str1` and `str2` are not equal, ignoring case."
    },
    "GTest EXPECT_FLOAT_EQ": {
        "prefix": "gteFEQ",
        "body": [
            "EXPECT_FLOAT_EQ(${1:val1}, ${2:val2});$0"
        ],
        "description": "Checks that floats `val1` and `val2` are almost equal."
    },
    "GTest EXPECT_DOUBLE_EQ": {
        "prefix": "gteDEQ",
        "body": [
            "EXPECT_DOUBLE_EQ(${1:val1}, ${2:val2});$0"
        ],
        "description": "Checks that doubles `val1` and `val2` are almost equal."
    },
    "GTest EXPECT_NEAR": {
        "prefix": "gteNEAR",
        "body": [
            "EXPECT_NEAR(${1:val1}, ${2:val2}, ${3:abs_error});$0"
        ],
        "description": "Checks that `|val1 - val2| <= abs_error`."
    },
    "GTest EXPECT_THROW": {
        "prefix": "gteTHROW",
        "body": [
            "EXPECT_THROW(${1:statement}, ${2:exception_type});$0"
        ],
        "description": "Checks that `statement` throws an exception of type `exception_type`."
    },
    "GTest EXPECT_ANY_THROW": {
        "prefix": "gteANYTHROW",
        "body": [
            "EXPECT_ANY_THROW(${1:statement});$0"
        ],
        "description": "Checks that `statement` throws any exception."
    },
    "GTest EXPECT_NO_THROW": {
        "prefix": "gteNOTHROW",
        "body": [
            "EXPECT_NO_THROW(${1:statement});$0"
        ],
        "description": "Checks that `statement` does not throw any exception."
    },
    "GTest EXPECT_PRED1": {
        "prefix": "gteP1",
        "body": [
            "EXPECT_PRED1(${1:pred}, ${2:v1});$0"
        ],
        "description": "Checks unary predicate `pred` on `v1`."
    },
    "GTest EXPECT_PRED2": {
        "prefix": "gteP2",
        "body": [
            "EXPECT_PRED2(${1:pred}, ${2:v1}, ${3:v2});$0"
        ],
        "description": "Checks binary predicate `pred` on `v1, v2`."
    },
    "GTest EXPECT_PRED3": {
        "prefix": "gteP3",
        "body": [
            "EXPECT_PRED3(${1:pred}, ${2:v1}, ${3:v2}, ${4:v3});$0"
        ],
        "description": "Checks ternary predicate `pred` on `v1, v2, v3`."
    },
    "GTest EXPECT_PRED4": {
        "prefix": "gteP4",
        "body": [
            "EXPECT_PRED4(${1:pred}, ${2:v1}, ${3:v2}, ${4:v3}, ${5:v4});$0"
        ],
        "description": "Checks 4-ary predicate `pred` on `v1, v2, v3, v4`."
    },
    "GTest EXPECT_PRED5": {
        "prefix": "gteP5",
        "body": [
            "EXPECT_PRED5(${1:pred}, ${2:v1}, ${3:v2}, ${4:v3}, ${5:v4}, ${6:v5});$0"
        ],
        "description": "Checks 5-ary predicate `pred` on `v1, v2, v3, v4, v5`."
    },
    "GTest EXPECT_PRED_FORMAT1": {
        "prefix": "gtePF1",
        "body": [
            "EXPECT_PRED_FORMAT1(${1:fmt}, ${2:v1});$0"
        ],
        "description": "Checks user-defined formatter `fmt` for `v1`."
    },
    "GTest EXPECT_PRED_FORMAT2": {
        "prefix": "gtePF2",
        "body": [
            "EXPECT_PRED_FORMAT2(${1:fmt}, ${2:v1}, ${3:v2});$0"
        ],
        "description": "Checks user-defined formatter `fmt` for `v1, v2`."
    },
    "GTest EXPECT_PRED_FORMAT3": {
        "prefix": "gtePF3",
        "body": [
            "EXPECT_PRED_FORMAT3(${1:fmt}, ${2:v1}, ${3:v2}, ${4:v3});$0"
        ],
        "description": "Checks user-defined formatter `fmt` for `v1, v2, v3`."
    },
    "GTest EXPECT_PRED_FORMAT4": {
        "prefix": "gtePF4",
        "body": [
            "EXPECT_PRED_FORMAT4(${1:fmt}, ${2:v1}, ${3:v2}, ${4:v3}, ${5:v4});$0"
        ],
        "description": "Checks user-defined formatter `fmt` for `v1, v2, v3, v4`."
    },
    "GTest EXPECT_PRED_FORMAT5": {
        "prefix": "gtePF5",
        "body": [
            "EXPECT_PRED_FORMAT5(${1:fmt}, ${2:v1}, ${3:v2}, ${4:v3}, ${5:v4}, ${6:v5});$0"
        ],
        "description": "Checks user-defined formatter `fmt` for `v1, v2, v3, v4, v5`."
    },
    "GTest EXPECT_HRESULT_SUCCEEDED": {
        "prefix": "gteHS",
        "body": [
            "EXPECT_HRESULT_SUCCEEDED(${1:expr});$0"
        ],
        "description": "Checks that HRESULT `expr` indicates success (SUCCEEDED)."
    },
    "GTest EXPECT_HRESULT_FAILED": {
        "prefix": "gteHF",
        "body": [
            "EXPECT_HRESULT_FAILED(${1:expr});$0"
        ],
        "description": "Checks that HRESULT `expr` indicates failure (FAILED)."
    },
    "GTest EXPECT_DEATH": {
        "prefix": "gteDEATH",
        "body": [
            "EXPECT_DEATH(${1:statement}, ${2:regex});$0"
        ],
        "description": "Checks that `statement` causes the process to die and stderr matches `regex`."
    },
    "GTest EXPECT_DEATH_IF_SUPPORTED": {
        "prefix": "gteDIS",
        "body": [
            "EXPECT_DEATH_IF_SUPPORTED(${1:statement}, ${2:regex});$0"
        ],
        "description": "Checks death as in EXPECT_DEATH, but skips on unsupported platforms."
    },
    "GTest EXPECT_DEBUG_DEATH": {
        "prefix": "gteDDEATH",
        "body": [
            "EXPECT_DEBUG_DEATH(${1:statement}, ${2:regex});$0"
        ],
        "description": "Checks death only in debug mode; behaves like EXPECT_DEATH otherwise."
    },
    "GTest EXPECT_EXIT": {
        "prefix": "gteEXIT",
        "body": [
            "EXPECT_EXIT(${1:statement}, ${2:predicate}, ${3:regex});$0"
        ],
        "description": "Checks that `statement` exits and that `predicate` and `regex` match its exit code and output."
    }
}
